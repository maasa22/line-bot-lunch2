# tutorial
- GCPでプロジェクトを作る。
    - https://console.cloud.google.com/
    - Googleアカウント持ってなかったら作る。
    - GCPにログインする。
    - プロジェクトを作成する。
    - （どこかでクレジットカード情報入れないといけない気がする。1ヶ月使いっぱなしでも10円もかからないはず。心配なら毎日GCPのホーム画面で請求情報チェックすればOK。）
- PythonをGCP上で動かす。
    - クラウドシェルを開く。
    - 右側に出る、App Engine のクイックスタート>pythonを押して参考にする。
    - 適当なフォルダを作って、その中にmain.py, requirements.txt, app.yamlを作る。（下記参照。）
    - そのフォルダに移動する.
    - pip install -r requirements.txt
    - python main.py
        - GCP上でローカルデプロイ完了！アクセスしてチェック！
    - gcloud app create
    - gcloud app deploy app.yaml --project hogehoge
        - リアルデプロイ完了！アクセスしてチェック！
- LINE developers作る。
    - https://developers.line.biz/
    - アカウントなければ作る。
    - プロジェクト作る。
    - Copy channel secret, issue&copy access token
    - QRコード見て友達になっておく。
    - auto reply message off
    - webhook urlを、https://hogehoge.appspot.com/callback にする。
    - https://manager.line.biz/ で応答メッセージ off, webhook off。
- LINE bot デプロイ
    - https://github.com/line/line-bot-sdk-python をコピペする。
    - access token, channel secret変えるだけ変える。
    - gcloud app deploy
    - 完。

## app.yaml
runtime: python37

## requirements.txt
Flask==1.1.2
line-bot-sdk==1.16.0

## main.py
########## flask x line bot x gcp hello world ##########
from flask import Flask, request, abort

from linebot import (
    LineBotApi, WebhookHandler
)
from linebot.exceptions import (
    InvalidSignatureError
)
from linebot.models import (
    MessageEvent, TextMessage, TextSendMessage,
)

app = Flask(__name__)

line_bot_api = LineBotApi('YOUR_CHANNEL_ACCESS_TOKEN')
handler = WebhookHandler('YOUR_CHANNEL_SECRET')


@app.route("/callback", methods=['POST'])
def callback():
    # get X-Line-Signature header value
    signature = request.headers['X-Line-Signature']

    # get request body as text
    body = request.get_data(as_text=True)
    app.logger.info("Request body: " + body)

    # handle webhook body
    try:
        handler.handle(body, signature)
    except InvalidSignatureError:
        print("Invalid signature. Please check your channel access token/channel secret.")
        abort(400)

    return 'OK'


@handler.add(MessageEvent, message=TextMessage)
def handle_message(event):
    line_bot_api.reply_message(
        event.reply_token,
        TextSendMessage(text=event.message.text))


if __name__ == "__main__":
    app.run()



## main.py
########## flask x gcp hello world ##########
from flask import Flask
import os
app = Flask(__name__)

@app.route('/')
def hello():
    name = "Hello World"
    return name

@app.route('/good')
def good():
    name = "Good"
    return name

if __name__ == "__main__":
    # port = int(os.getenv("PORT"))
    port = 5000
    app.run(host="0.0.0.0", port=port)
   # app.run(debug=True)
